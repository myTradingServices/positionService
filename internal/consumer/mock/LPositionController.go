// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	model "github.com/mmfshirokan/positionService/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// LPositionController is an autogenerated mock type for the LPositionController type
type LPositionController struct {
	mock.Mock
}

type LPositionController_Expecter struct {
	mock *mock.Mock
}

func (_m *LPositionController) EXPECT() *LPositionController_Expecter {
	return &LPositionController_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: userID, ch
func (_m *LPositionController) Add(userID string, ch chan model.Position) {
	_m.Called(userID, ch)
}

// LPositionController_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type LPositionController_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - userID string
//   - ch chan model.Position
func (_e *LPositionController_Expecter) Add(userID interface{}, ch interface{}) *LPositionController_Add_Call {
	return &LPositionController_Add_Call{Call: _e.mock.On("Add", userID, ch)}
}

func (_c *LPositionController_Add_Call) Run(run func(userID string, ch chan model.Position)) *LPositionController_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(chan model.Position))
	})
	return _c
}

func (_c *LPositionController_Add_Call) Return() *LPositionController_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *LPositionController_Add_Call) RunAndReturn(run func(string, chan model.Position)) *LPositionController_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: userID
func (_m *LPositionController) Delete(userID string) bool {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LPositionController_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type LPositionController_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - userID string
func (_e *LPositionController_Expecter) Delete(userID interface{}) *LPositionController_Delete_Call {
	return &LPositionController_Delete_Call{Call: _e.mock.On("Delete", userID)}
}

func (_c *LPositionController_Delete_Call) Run(run func(userID string)) *LPositionController_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *LPositionController_Delete_Call) Return(wasDeleted bool) *LPositionController_Delete_Call {
	_c.Call.Return(wasDeleted)
	return _c
}

func (_c *LPositionController_Delete_Call) RunAndReturn(run func(string) bool) *LPositionController_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: userID
func (_m *LPositionController) Get(userID string) (chan model.Position, bool) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 chan model.Position
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (chan model.Position, bool)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) chan model.Position); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan model.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// LPositionController_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type LPositionController_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - userID string
func (_e *LPositionController_Expecter) Get(userID interface{}) *LPositionController_Get_Call {
	return &LPositionController_Get_Call{Call: _e.mock.On("Get", userID)}
}

func (_c *LPositionController_Get_Call) Run(run func(userID string)) *LPositionController_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *LPositionController_Get_Call) Return(_a0 chan model.Position, _a1 bool) *LPositionController_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LPositionController_Get_Call) RunAndReturn(run func(string) (chan model.Position, bool)) *LPositionController_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewLPositionController creates a new instance of LPositionController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLPositionController(t interface {
	mock.TestingT
	Cleanup(func())
}) *LPositionController {
	mock := &LPositionController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
